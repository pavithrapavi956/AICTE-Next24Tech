# -*- coding: utf-8 -*-
"""House price prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vnGyQ3va4NAN6cYYgdlLx7zlWFPeyY5l

**House Price Prediction System Using Data Analytics Algorithms**

**Importing all the dataset**
"""

# Import  all the packages required for the prediction

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("/content/archive (13).zip")

data

data.head()

data.shape

"""**Data cleaning**"""

# Check for missing values
data.isnull().sum()

obj_cols = data.select_dtypes(exclude=np.number).columns
for col in obj_cols:
    print(f'{data[col].value_counts()}\n\n')

"""**Data Exploration and Analysis**"""

data.describe()

sns.pairplot(data)

data[['price', 'area']].corr()

plt.figure(figsize=(18, 24))
plt.subplots(2, 2)
for i in range(4):
    plt.subplot(2, 2, i+1)
    sns.histplot(x='price', hue=obj_cols[i], data=data, label=obj_cols[i], multiple='stack', element='bars')

plt.tight_layout()
plt.show()

#heat map
int_cols = data.select_dtypes(include=np.number).columns

sns.heatmap(data[int_cols].corr(), annot=True)

"""**Building the model**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

for col in obj_cols:
    data[col] = LabelEncoder().fit_transform(data[col])
for col in obj_cols:
    print(f'{data[col].value_counts()}\n\n')

# Split the dataset
X = data.drop(['price'], axis=1)
y = data['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Scale the dataset
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Save the scaler object
import pickle
pickle.dump(scaler, open('scaler.sav', 'wb'))

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

dtr = DecisionTreeRegressor()
dtr.fit(X_train_scaled, y_train)

svr = SVR()
svr.fit(X_train_scaled, y_train)

gbr = GradientBoostingRegressor()
gbr.fit(X_train_scaled, y_train)

ridge = Ridge()
ridge.fit(X_train_scaled, y_train)

lasso = Lasso()
lasso.fit(X_train_scaled, y_train)

rfr = RandomForestRegressor()
rfr.fit(X_train_scaled, y_train)

"""**Model Evaluation**"""

models = [lr, rfr, dtr, lasso, ridge, gbr, svr]
mses = []

for model in models:
    pred = model.predict(X_test_scaled)
    mse = mean_squared_error(y_test, pred)
    print(f'{model}: \t\t{mse}')
    mses.append(mse)

np.min(mses)
pickle.dump(lr, open('linreg.pkl', 'wb'))
X

lr.predict(scaler.transform([[7420, 2, 1, 1, 1, 0, 1, 0, 0, 2, 0, 2]]))[0]

